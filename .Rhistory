)
print(ls())  # Check if `ui` and `server` are listed
library(shiny)
library(here)
runGitHub("ballr_customized", "natebendermontana")
library(shiny)
library(here)
runGitHub("ballr_customized", "natebendermontana")
library(shiny)
library(here)
runGitHub("ballr_customized", "natebendermontana")
player_photo_url = function(player_id) {
paste0("https://stats.nba.com/media/players/230x185/", player_id, ".png")
}
player_photo_url(201939)
# load data
total_player_stats_24_25 <- read.csv(here("data", "total_player_stats_24_25.csv"))
library(hoopR)
player_photo_url <- function(player_id) {
# Get the headshot URL using hoopR
headshot_url <- nba_playerheadshot(player_id)
# Ensure the URL matches the expected format
if (grepl("png$", headshot_url)) {
return(headshot_url)
} else {
stop("The retrieved URL is not a PNG file.")
}
}
# Test the function
player_photo_url(201939)
library(shiny)
library(here)
runGitHub("ballr_customized", "natebendermontana")
library(magick)
library(here)
here()
here(data/)
here("data")
list.files(here("data"))
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(image_files)
images <- image_read(png_files)
total_duration <- 15
num_images <- length(images)
frame_delay <- total_duration / num_images
gif <- images %>%
image_animate(fps = 1 / (frame_delay / 1000), loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
fps <- floor(100 / (total_duration / num_frames * 100))
num_images <- length(images)
frame_delay <- total_duration / num_images
fps <- floor(100 / (total_duration / num_images * 100))
gif <- images %>%
image_animate(fps, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
total_duration / num_images * 100
100/250
fps <- floor(100 / (frame_delay / 100))
num_frames <- length(images)
frame_delay <- total_duration / num_frames
num_frames <- length(images)
frame_delay <- total_duration / num_frames * 1000 # in milliseconds
fps <- floor(100 / (frame_delay / 100))
6*2.5
num_frames <- length(images)
frame_delay <- total_duration / num_frames * 1000 # in milliseconds
fps <- floor(100 / (frame_delay / 100))
gif <- images %>%
image_animate(fps, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
cat("GIF created and saved as", gif_path)
frame_delay <- total_duration / num_frames * 100 # in milliseconds
fps <- floor(100 / (frame_delay / 100))
gif <- images %>%
image_animate(delay = frame_delay, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
library(shiny)
library(here)
runGitHub("ballr_customized", "natebendermontana")
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(png_files)
total_duration <- 15
num_frames <- length(images)
frame_delay <- total_duration / num_frames * 100 # in milliseconds
frame_delay <- total_duration / num_frames * 100 # in centiseconds
gif <- images %>%
image_animate(delay = frame_delay, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
cat("GIF created and saved as", gif_path)
library(magick)
library(here)
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(png_files)
total_duration <- 20
num_frames <- length(images)
frame_delay <- total_duration / num_frames * 100 # in centiseconds
#fps <- floor(100 / (frame_delay / 100))
gif <- images %>%
image_animate(delay = frame_delay, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
cat("GIF created and saved as", gif_path)
# with transitions
morphed_images <- image_morph(images, frames = 10)  # Adds 10 transitional frames between each pair
gif <- morphed_images %>%
image_animate(delay = frame_delay / (10 + 1), loop = 0) %>%  # Adjust delay for morphed frames
image_resize("800x800")  # Optional: resize for consistency
# Save the GIF
gif_path <- here("data", "steph_curry_fade_transition.gif")
image_write(gif, path = gif_path)
# Print message
cat("GIF with fade transitions created and saved at:", gif_path, "\n")
real_frame_delay <- (total_duration / num_images) * 100
transition_frames <- image_morph(images, frames = 10)  # Add 10 transitional frames between each image
# Alternate between real frames and morph frames
combined_frames <- c()
for (i in seq_along(images)) {
combined_frames <- c(combined_frames, images[i])  # Add the main frame
if (i < length(images)) {
combined_frames <- c(combined_frames, transition_frames[(10 * (i - 1) + 1):(10 * i)])  # Add the morph frames
}
}
# Animate the GIF
gif <- image_animate(
combined_frames,
delay = c(rep(real_frame_delay, num_images), rep(real_frame_delay / 10, length(transition_frames))),
loop = 0
) %>%
image_resize("800x800")  # Optional: resize for consistency
# Animate the GIF
gif <- combined_frames %>%
image_animate(
delay = c(rep(real_frame_delay, num_images), rep(real_frame_delay / 10, length(transition_frames))),
loop = 0
) %>%
image_resize("800x800")  # Optional: resize for consistency
# Alternate between real frames and morph frames
combined_frames <- image_join(images[1])  # Start with the first frame
for (i in seq_along(images)) {
combined_frames <- c(combined_frames, images[i])  # Add the main frame
if (i < length(images)) {
combined_frames <- c(combined_frames, transition_frames[(10 * (i - 1) + 1):(10 * i)])  # Add the morph frames
}
}
combined_frames <- image_join(combined_frames)
# Animate the GIF
gif <- combined_frames %>%
image_animate(
delay = c(rep(real_frame_delay, num_images), rep(real_frame_delay / 10, length(transition_frames))),
loop = 0
) %>%
image_resize("800x800")  # Optional: resize for consistency
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- c(real_frame_delay)  # Initialize with delay for the first frame
for (i in seq_along(images)) {
combined_frames <- c(combined_frames, images[i])  # Add main frame
frame_delays <- c(frame_delays, real_frame_delay)  # Main frame delay
if (i < length(images)) {
# Add transition frames with their delay
combined_frames <- c(combined_frames, transition_frames[(10 * (i - 1) + 1):(10 * i)])
frame_delays <- c(frame_delays, rep(morph_frame_delay, 10))  # Transition frame delays
}
}
real_frame_delay <- (total_duration / num_images) * 100
morph_frame_delay <- real_frame_delay / 10  # Shorter delay for transition frames
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- c(real_frame_delay)  # Initialize with delay for the first frame
for (i in seq_along(images)) {
combined_frames <- c(combined_frames, images[i])  # Add main frame
frame_delays <- c(frame_delays, real_frame_delay)  # Main frame delay
if (i < length(images)) {
# Add transition frames with their delay
combined_frames <- c(combined_frames, transition_frames[(10 * (i - 1) + 1):(10 * i)])
frame_delays <- c(frame_delays, rep(morph_frame_delay, 10))  # Transition frame delays
}
}
# Animate the GIF
gif <- combined_frames %>%
image_animate(
delay = frame_delays,  # Correct delay vector matching all frames
loop = 0
) %>%
image_resize("800x800")  # Optional: resize for consistency
# Save the GIF
gif_path <- here("data", "steph_curry_fade_transition.gif")
image_write(gif, path = gif_path)
library(magick)
library(here)
# setup
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(png_files)
total_duration <- 20
# alternate version with transitions ####
real_frame_delay <- (total_duration / num_images) * 100
num_frames <- length(images)
# alternate version with transitions ####
real_frame_delay <- (total_duration / num_frames) * 100
morph_frame_delay <- real_frame_delay / 10  # Shorter delay for transition frames
morph_frame_delay <- real_frame_delay / 20  # Shorter delay for transition frames
# alternate version with transitions ####
real_frame_delay <- (total_duration / num_frames) * 100 -50
morph_frame_delay <- real_frame_delay / 20  # Shorter delay for transition frames
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- c(real_frame_delay)  # Initialize with delay for the first frame
for (i in seq_along(images)) {
combined_frames <- c(combined_frames, images[i])  # Add main frame
frame_delays <- c(frame_delays, real_frame_delay)  # Main frame delay
if (i < length(images)) {
# Add transition frames with their delay
combined_frames <- c(combined_frames, transition_frames[(10 * (i - 1) + 1):(10 * i)])
frame_delays <- c(frame_delays, rep(morph_frame_delay, 10))  # Transition frame delays
}
}
transition_frames <- image_morph(images, frames = 10)
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- c(real_frame_delay)  # Initialize with delay for the first frame
for (i in seq_along(images)) {
combined_frames <- c(combined_frames, images[i])  # Add main frame
frame_delays <- c(frame_delays, real_frame_delay)  # Main frame delay
if (i < length(images)) {
# Add transition frames with their delay
combined_frames <- c(combined_frames, transition_frames[(10 * (i - 1) + 1):(10 * i)])
frame_delays <- c(frame_delays, rep(morph_frame_delay, 10))  # Transition frame delays
}
}
# Animate the GIF
gif <- combined_frames %>%
image_animate(
delay = frame_delays,  # Correct delay vector matching all frames
loop = 0
) %>%
image_resize("800x800")  # Optional: resize for consistency
# Save the GIF
gif_path <- here("data", "steph_curry_fade_transition.gif")
image_write(gif, path = gif_path)
real_frame_delay <- (total_duration / num_frames) * 100 -50
morph_frame_delay <- real_frame_delay / 20  # Shorter delay for transition frames
transition_frames <- image_morph(images, frames = 10)
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- real_frame_delay
for (i in seq_len(length(images) - 1)) {
# Add the main frame
combined_frames <- c(combined_frames, images[i + 1])
frame_delays <- c(frame_delays, real_frame_delay)
# Create morph frames
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames)
frame_delays <- c(frame_delays, rep(morph_frame_delay, morph_frame_count))
}
real_frame_delay <- (total_duration / num_frames) * 100 -50
morph_frame_delay <- real_frame_delay / 20  # Shorter delay for transition frames
transition_frames <- image_morph(images, frames = 10)
morph_frame_count <- 10  # Number of morph frames between each pair of images
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- real_frame_delay
for (i in seq_len(length(images) - 1)) {
# Add the main frame
combined_frames <- c(combined_frames, images[i + 1])
frame_delays <- c(frame_delays, real_frame_delay)
# Create morph frames
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames)
frame_delays <- c(frame_delays, rep(morph_frame_delay, morph_frame_count))
}
# Save the GIF
gif_path <- here("data", "steph_curry_fade_transition.gif")
image_write(gif, path = gif_path)
# Print message
cat("GIF with fade transitions created and saved at:", gif_path, "\n")
library(magick)
library(here)
# setup
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(png_files)
total_duration <- 20
num_frames <- length(images)
# simple gif ####
frame_delay <- total_duration / num_frames * 100 # in centiseconds
gif <- images %>%
image_animate(delay = frame_delay, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
cat("GIF created and saved as", gif_path)
# alternate version with transitions ####
real_frame_delay <- (total_duration / num_frames) * 100 -50
morph_frame_delay <- real_frame_delay / 20  # Shorter delay for transition frames
transition_frames <- image_morph(images, frames = 10)
morph_frame_count <- 10  # Number of morph frames between each pair of images
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- real_frame_delay
for (i in seq_len(num_images - 1)) {
# Add morph frames between current and next image
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames, images[i + 1])
frame_delays <- c(frame_delays, rep(morph_frame_delay, morph_frame_count), real_frame_delay)
}
library(magick)
library(here)
# setup
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(png_files)
total_duration <- 20
num_frames <- length(images)
# simple gif ####
frame_delay <- total_duration / num_frames * 100 # in centiseconds
gif <- images %>%
image_animate(delay = frame_delay, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
cat("GIF created and saved as", gif_path)
# alternate version with transitions ####
real_frame_delay <- (total_duration / num_frames) * 100 -50
morph_frame_delay <- real_frame_delay / 20  # Shorter delay for transition frames
transition_frames <- image_morph(images, frames = 10)
morph_frame_count <- 10  # Number of morph frames between each pair of images
combined_frames <- images[1]  # Start with the first real frame
frame_delays <- real_frame_delay
for (i in seq_len(num_frames - 1)) {
# Add morph frames between current and next image
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames, images[i + 1])
frame_delays <- c(frame_delays, rep(morph_frame_delay, morph_frame_count), real_frame_delay)
}
gif <- combined_frames %>%
image_animate(delay = frame_delays, loop = 0) %>%
image_resize("800x800")  # Resize for consistency
combined_frames
length(combined_frames)
length(frame_delays)
for (i in seq_len(num_frames - 1)) {
# Add the current real frame
combined_frames <- c(combined_frames, images[i])
frame_delays <- c(frame_delays, real_frame_delay)
# Add morph frames between the current and next frame
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames)
frame_delays <- c(frame_delays, rep(morph_frame_delay, morph_frame_count))
}
# Add the final real frame
combined_frames <- c(combined_frames, images[num_frames])
frame_delays <- c(frame_delays, real_frame_delay)
# Verify lengths
if (length(combined_frames) != length(frame_delays)) {
stop("Mismatch between combined_frames and frame_delays lengths.")
}
length(frame_delays)
length(combined_frames)
# alternate version with transitions ####
num_images <- length(images)
real_frame_delay <- (total_duration / num_images) * 100  # Delay for real frames in centiseconds
morph_frame_count <- 10  # Number of morph frames between each pair of images
morph_frame_delay <- real_frame_delay / (morph_frame_count + 1)  # Delay for morph frames
for (i in seq_len(num_images - 1)) {
# Add the current real frame
combined_frames <- c(combined_frames, images[i])
frame_delays <- c(frame_delays, real_frame_delay)
# Add morph frames between the current and next frame
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames)
frame_delays <- c(frame_delays, rep(morph_frame_delay, morph_frame_count))
}
# Add the final real frame
combined_frames <- c(combined_frames, images[num_images])
frame_delays <- c(frame_delays, real_frame_delay)
# Verify lengths
if (length(combined_frames) != length(frame_delays)) {
stop("Mismatch between combined_frames and frame_delays lengths.")
}
# Verify lengths
if (length(combined_frames) != length(frame_delays)) {
print(length(combined_frames))
print(length(frame_delays))
stop("Mismatch between combined_frames and frame_delays lengths.")
}
# alternate version with transitions ####
num_images <- length(images)
real_frame_delay <- (total_duration / num_images) * 100  # Delay for real frames in centiseconds
morph_frame_count <- 10  # Number of morph frames between each pair of images
morph_frame_delay <- real_frame_delay / (morph_frame_count + 1)  # Delay for morph frames
# Initialize combined frames and frame delays
combined_frames <- c()
frame_delays <- c()
for (i in seq_len(num_images - 1)) {
# Add the current real frame
combined_frames <- c(combined_frames, images[i])
frame_delays <- c(frame_delays, real_frame_delay)
# Add morph frames between the current and next frame
morph_frames <- image_morph(c(images[i], images[i + 1]), frames = morph_frame_count)
combined_frames <- c(combined_frames, morph_frames)
frame_delays <- c(frame_delays, rep(morph_frame_delay, length(morph_frames)))
}
# Add the final real frame
combined_frames <- c(combined_frames, images[num_images])
frame_delays <- c(frame_delays, real_frame_delay)
# Debugging: Print length comparisons
cat("Length of combined_frames:", length(combined_frames), "\n")
cat("Length of frame_delays:", length(frame_delays), "\n")
# Ensure lengths match
if (length(combined_frames) != length(frame_delays)) {
stop("Mismatch detected between combined_frames and frame_delays lengths.")
}
num_images <- length(images)
morph_frame_count <- 10  # Number of frames between transitions
real_frame_delay <- (total_duration / num_images) * 100  # Delay for real frames in centiseconds
morph_duration <- total_duration / (num_images - 1)  # Time for each morphing segment
# Create a data frame for tweenr to interpolate
image_ids <- seq_along(images)
image_df <- tibble(
id = rep(image_ids, each = morph_frame_count + 1),  # Repeat each id with space for transitions
frame = seq(0, total_duration, length.out = length(image_ids) * (morph_frame_count + 1)),  # Frame sequence
image = rep(images, each = morph_frame_count + 1)  # Repeat images for each segment
)
library(here)
library(magick)
library(tweenr)
library(dplyr)
# setup
data_path <- here("data")
png_files <- list.files(data_path, pattern = "\\.png$", full.names = TRUE)
images <- image_read(png_files)
total_duration <- 20
# simple gif ####
frame_delay <- total_duration / num_frames * 100 # in centiseconds
gif <- images %>%
image_animate(delay = frame_delay, loop = 0) %>%
image_resize("800x800")  # Optional: resize for consistency
gif_path <- here("data", "steph_curry_shot_charts.gif")
image_write(gif, path = gif_path)
cat("GIF created and saved as", gif_path)
# alternate version with transitions ####
num_images <- length(images)
morph_frame_count <- 10  # Number of frames between transitions
real_frame_delay <- (total_duration / num_images) * 100  # Delay for real frames in centiseconds
morph_duration <- total_duration / (num_images - 1)  # Time for each morphing segment
# Create a data frame for tweenr to interpolate
image_ids <- seq_along(images)
image_df <- tibble(
id = rep(image_ids, each = morph_frame_count + 1),  # Repeat each id with space for transitions
frame = seq(0, total_duration, length.out = length(image_ids) * (morph_frame_count + 1)),  # Frame sequence
image = rep(images, each = morph_frame_count + 1)  # Repeat images for each segment
)
images <- lapply(png_files, function(file) {
img <- image_read(file)
as.raster(img)
})
image_to_df <- function(image, id) {
as.data.frame(as.table(image)) %>%
mutate(id = id, ease = "linear") %>%
rename(x = Var1, y = Var2, color = Freq)
}
image_data <- bind_rows(
lapply(seq_along(images), function(i) image_to_df(images[[i]], id = i))
)
tweened_images <- tween_elements(
image_data,
time = "id",
id = "id",
ease = "ease",
nframes = 100  # Total number of tweened frames
)
View(image_data)
colnames(image_data)
tweened_images <- tween_elements(
image_data,
time = "id",
ease = "ease",
nframes = 100  # Total number of tweened frames
)
tweened_images <- tween_elements(
image_data,
time = "id",
group = "id",
ease = "ease",
nframes = 100  # Total number of tweened frames
)
frames <- split(tweened_images, tweened_images$.frame)
reconstruct_frame <- function(frame_data) {
raster_matrix <- with(frame_data, matrix(color, nrow = max(x), ncol = max(y)))
as.raster(raster_matrix)
}
reconstructed_images <- lapply(frames, reconstruct_frame)
reconstruct_frame <- function(frame_data) {
frame_data <- frame_data %>%
mutate(x = as.numeric(as.character(x)),
y = as.numeric(as.character(y)))
raster_matrix <- with(frame_data, matrix(color, nrow = max(x), ncol = max(y)))
as.raster(raster_matrix)
}
reconstructed_images <- lapply(frames, reconstruct_frame)
gapminder_edit <- gapminder %>%
arrange(country, year) %>%
select(gdpPercap,lifeExp,year,country, continent, pop) %>%
rename(x=gdpPercap,y=lifeExp,time=year,id=country) %>%
mutate(ease="linear")
gapminder <- gapminder
gapminder <- gapminder
gapminder <- gapminder()
